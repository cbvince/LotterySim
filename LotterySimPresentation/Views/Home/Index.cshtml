@using LotterySim.Business
@using System.Text

@model List<LotterySim.Business.Team>


<style>


    a:link {
        text-decoration: none;
        color: black;
    }

    a:visited {
        text-decoration: none;
        color: black;
    }

    a:hover {
        font-weight: bold;
    }
</style>

<div align="center">
    <h1 class="mb-3">NBA Lottery Generator</h1>
</div>

<div class="container" align="center">

    <p></p>

    <input type="button" value="Generate" class="btn btn-primary" onclick="location.href='@Url.Action("GenerateLottery", "Home")'" />&nbsp;&nbsp;&nbsp;&nbsp;

    <input type="button" name="btnReset" class="btn btn-primary" value="Reset" onclick="location.href='@Url.Action("Index", "Home")'" />

</div>
<p></p>
<div class="container">

    <table class="table table-striped table-sm">
        <thead>
            <tr>

                <th scope="col">Pick</th>
                <th scope="col"></th>
                <th scope="col">Team</th>
                <th scope="col">Record</th>
                <th scope="col">WIN %</th>
                <th scope="col">GB</th>
                <th scope="col">Streak</th>
                <th scope="col">L10</th>
                <th scope="col">Top 4</th>
                <th scope="col">#1 OVR</th>

            </tr>
        </thead>
        <tbody>

            @foreach (var team in Model.Where(p => p.PickNumber < 15).OrderBy(p => p.PickNumber))
            {
                <tr>

                    <td>@team.PickNumber</td>
                    <td align="right"><span class=@GetLotteryMovementColor(team)>@team.LotteryMovement</span></td>

                    <td>@Html.Raw(GetTeamName(team)) @DisplayHelper.DisplayLockIcon(team)</td>
                    <td>@team.WinLossRecord</td>
                    <td>@team.WinPercentage</td>
                    <td> @team.LotteryGamesBack</td>
                    <td><span class="@GetWinLossStreakColor(team)">@team.WinLossStreak</span></td>
                    <td><span class="@GetLast10WinLossColor(team)">@team.LastTenGamesRecord</span></td>
                    <td>@team.TopFourPickOdds</td>
                    <td>@team.TopPickOdds</td>
                </tr>
            }
            <tr>
                <td colspan="10" align="center"><strong>END&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OF&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LOTTERY</strong></td>
            </tr>


            @foreach (var team in Model.Where(p => p.PickNumber >= 15).OrderBy(p => p.PickNumber))
            {
                <tr>

                    <td>@team.PickNumber</td>
                    <td align="right"><span class=@GetLotteryMovementColor(team)>@team.LotteryMovement</span></td>

                    <td>@Html.Raw(GetTeamName(team)) @DisplayHelper.DisplayLockIcon(team)</td>
                    <td>@team.WinLossRecord</td>
                    <td>@team.WinPercentage</td>
                    <td> @team.LotteryGamesBack</td>
                    <td><span class="@GetWinLossStreakColor(team)">@team.WinLossStreak</span></td>
                    <td><span class="@GetLast10WinLossColor(team)">@team.LastTenGamesRecord</span></td>
                    <td>@team.TopFourPickOdds</td>
                    <td>@team.TopPickOdds</td>
                </tr>
            }


        </tbody>
    </table>
</div>



@{


    string GetTeamImage(string teamname)
    {
        return "~/Content/Images/" + teamname.Replace(" ", "") + ".svg";

    }

    string GetTeamName(Team team)
    {


        if (team.NewTeamName == null)
        {
            return BuildTeamAndImageString(team.TeamName);
        }

        else
        {
            var result = BuildTeamAndImageString(team.OriginalTeamName) + " to " + BuildTeamAndImageString(team.NewTeamName);
            return result;


        }

    }

    string BuildTeamAndImageString(string teamname)
    {
        var teamImageUrl = Url.Content(GetTeamImage(teamname));


        StringBuilder sb = new StringBuilder();
        sb.Append("<img src =");
        sb.Append(teamImageUrl);
        sb.Append(" width = \"30\" height = \"30\" />");
        //sb.Append(teamname);
        sb.Append(@Html.ActionLink(teamname, "TeamDetail", new { teamname = teamname }, new { @class = "teamlink" }));
        return sb.ToString();




    }

    string GetWinLossStreakColor(Team team)
    {
        if (team.WinorLossStreak && team.ConsecutiveWinLoss > 3 && team.ConsecutiveWinLoss < 5) return "text-warning";
        if (team.WinorLossStreak && team.ConsecutiveWinLoss >= 5) return "text-danger";
        if (!team.WinorLossStreak && team.ConsecutiveWinLoss > 3) return "text-success";
        return "";
    }

    string GetLotteryMovementColor(Team team)
    {
        var color = string.Empty;


        if (team.LotteryMovement != null && team.LotteryMovement != string.Empty)
        {
            switch (team.LotteryMovement.First().ToString())
            {
                case "+":
                    color = "text-success";
                    break;
                case "-":
                    color = "text-danger";
                    break;
            }


        }
        return color;

    }

    string GetLast10WinLossColor(Team team)
    {
        if (team.LastTenLosses >= 7) return "text-success";
        if (team.LastTenLosses <= 3) return "text-danger";
        return "";
    }

}