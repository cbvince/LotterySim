@using LotterySim.Business.NHL
@using LotterySim.Business
@model LotterySim.Business.NHL.NHLDraftPick





<tr>
    <td>@Model.PickNumber</td>
    <td>@ReturnSwapTeamInfo(Model)<img src="@Url.Content(Model.Team.team.Image)" width="30" height="30" />
        @Html.ActionLink(Model.Team.team.name, "NHLTeamDetail", new { teamID = Model.Team.team.id }, new { @class = "teamlink" })
</td>
    <td>@Model.OriginalTeam.leagueRecord.wins-@Model.OriginalTeam.leagueRecord.losses-@Model.OriginalTeam.leagueRecord.ot</td>
    <td>@Model.OriginalTeam.points</td>
    <td>@GetStreak(Model.OriginalTeam)</td>
    <td>@Model.OriginalTeam.</td>
</tr>


@helper ReturnSwapTeamInfo(NHLDraftPick pick)
{
    if (pick.PickSwapType == PickSwapType.Swapped)
    {

    <img src="@Url.Content(pick.OriginalTeam.team.Image)" width="30" height="30" />
    
    @Html.ActionLink(pick.OriginalTeam.team.name, "NHLTeamDetail", new { teamID = pick.OriginalTeam.team.id })

       
    <i class="bi bi-arrow-right" style="font-size: 1rem"></i>

    }
}

@helper GetStreak(NHLTeam.Teamrecord teamRecord)
{
    switch (teamRecord.streak.streakNumber)
    {

        case var expression when teamRecord.streak.streakNumber >= 3 && (teamRecord.streak.streakType == "wins" || teamRecord.streak.streakType == "ot"):
            <span class="text-danger">@teamRecord.streak.streakCode.Replace("OT", "W")</span>;
            break;
        case var expression when teamRecord.streak.streakNumber >= 3 && teamRecord.streak.streakType == "losses":
            <span class="text-success">@teamRecord.streak.streakCode</span>
            break;
        default:
            <span>@teamRecord.streak.streakCode</span>

            break;
    }

}
